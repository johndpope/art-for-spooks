// from https://www.shadertoy.com/view/XslGDr
// Radically decreases the contrast, so we're not going to use it for now...

precision mediump float;
varying vec2 texCoord;

uniform float time;
uniform vec2 resolution;
uniform sampler2D texSampler2D;
float PI = 3.1415926535;
uniform mat4 modelViewProjectionMatrix;

vec3 sample(vec2 tc);
vec3 blur(vec2 tc, float offs);
vec3 highlights(vec3 pixel, float thres);

vec3 sample(vec2 tc)
{
	return pow(texture2D(texSampler2D, tc).xyz, vec3(2.2, 2.2, 2.2));
}

vec3 hsample(vec2 tc)
{
	return highlights(sample(tc), 0.6);
}

vec3 blur(vec2 tc, float offs)
{
//	vec4 xoffs = offs * vec4(-2.0, -1.0, 1.0, 2.0) / resolution.x;
//	vec4 yoffs = offs * vec4(-2.0, -1.0, 1.0, 2.0) / resolution.y;
	vec4 xoffs = offs * vec4(-2.0, -1.0, 1.0, 2.0);
	vec4 yoffs = offs * vec4(-2.0, -1.0, 1.0, 2.0);
	
	vec3 color = vec3(0.0, 0.0, 0.0);
	color += hsample(tc + vec2(xoffs.x, yoffs.x)) * 0.00366;
	color += hsample(tc + vec2(xoffs.y, yoffs.x)) * 0.01465;
	color += hsample(tc + vec2(    0.0, yoffs.x)) * 0.02564;
	color += hsample(tc + vec2(xoffs.z, yoffs.x)) * 0.01465;
	color += hsample(tc + vec2(xoffs.w, yoffs.x)) * 0.00366;
	
	color += hsample(tc + vec2(xoffs.x, yoffs.y)) * 0.01465;
	color += hsample(tc + vec2(xoffs.y, yoffs.y)) * 0.05861;
	color += hsample(tc + vec2(    0.0, yoffs.y)) * 0.09524;
	color += hsample(tc + vec2(xoffs.z, yoffs.y)) * 0.05861;
	color += hsample(tc + vec2(xoffs.w, yoffs.y)) * 0.01465;
	
	color += hsample(tc + vec2(xoffs.x, 0.0)) * 0.02564;
	color += hsample(tc + vec2(xoffs.y, 0.0)) * 0.09524;
	color += hsample(tc + vec2(    0.0, 0.0)) * 0.15018;
	color += hsample(tc + vec2(xoffs.z, 0.0)) * 0.09524;
	color += hsample(tc + vec2(xoffs.w, 0.0)) * 0.02564;
	
	color += hsample(tc + vec2(xoffs.x, yoffs.z)) * 0.01465;
	color += hsample(tc + vec2(xoffs.y, yoffs.z)) * 0.05861;
	color += hsample(tc + vec2(    0.0, yoffs.z)) * 0.09524;
	color += hsample(tc + vec2(xoffs.z, yoffs.z)) * 0.05861;
	color += hsample(tc + vec2(xoffs.w, yoffs.z)) * 0.01465;
	
	color += hsample(tc + vec2(xoffs.x, yoffs.w)) * 0.00366;
	color += hsample(tc + vec2(xoffs.y, yoffs.w)) * 0.01465;
	color += hsample(tc + vec2(    0.0, yoffs.w)) * 0.02564;
	color += hsample(tc + vec2(xoffs.z, yoffs.w)) * 0.01465;
	color += hsample(tc + vec2(xoffs.w, yoffs.w)) * 0.00366;
    
	return color;
}

vec3 highlights(vec3 pixel, float thres)
{
	float val = (pixel.x + pixel.y + pixel.z) / 3.0;
	return pixel * smoothstep(thres - 0.1, thres + 0.1, val);
}

void main(void)
{
    vec2 tc =  texCoord.xy;
	vec3 color = blur(tc, 2.0);
	color += blur(tc, 3.0);
	//color += blur(tc, 5.0);
	//color += blur(tc, 7.0);
	color /= 2.0;
	
	color += sample(tc);
	
//	float div_pos = iMouse.x / iResolution.x;
//	if(iMouse.x < 2.0) {
//		div_pos = 0.5;
//	}
//	float divider = smoothstep(div_pos - 0.01, div_pos + 0.01, tc.x);
//	gl_FragColor.xyz = mix(sample(tc), color, divider) * (divider * divider + (1.0 - divider) * (1.0 - divider));
    gl_FragColor.xyz = color;
	gl_FragColor.w = 1.0;
}